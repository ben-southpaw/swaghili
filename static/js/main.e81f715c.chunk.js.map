{"version":3,"sources":["../node_modules/sentiment/languages sync /^/.//.*//index$","Components/TwitterComponent.js","Components/Background.js","data/data.js","Components/Quotes.js","Components/QuoteContainer.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","TwitterComponent","sourceType","screenName","options","height","theme","data-chrome","cubeTexture","THREE","load","scale","scaleVel","Background","this","renderer","setPixelRatio","window","devicePixelRatio","setClearColor","scene","camera","innerWidth","innerHeight","position","z","orbitControls","OrbitControls","domElement","geometry","material","kanyeBoxFace","add","document","body","appendChild","style","top","left","addEvents","onResize","update","addEventListener","bind","rotation","y","render","setScalar","requestAnimationFrame","w","h","setSize","aspect","updateProjectionMatrix","imgUrl","console","log","img","Image","image","needsUpdate","src","sad","index","images","neutral","happy","sentiment","Sentiment","Quotes","props","state","kanyeTweet","handleClick","axios","get","then","response","setState","data","catch","error","values","result","analyze","wellbeing","val","face","text","getWellbeing","comparative","Data","length","setNewTexture","className","score","type","onClick","Component","QuoteContainer","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e81f715c.chunk.js","sourcesContent":["var map = {\n\t\"./en/index\": 23\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 58;","/**\n * Created by southpaw on 10/12/19.\n */\nimport React from 'react';\nimport { TwitterTimelineEmbed } from 'react-twitter-embed';\n\nconst TwitterComponent = () => {\n    return(\n        <TwitterTimelineEmbed\n            sourceType=\"profile\"\n            screenName=\"kanyewest\"\n            options={{height: 400}}\n            theme=\"dark\"\n            data-chrome=\"noheader noborders\"\n        />\n    )\n}\n\nexport default TwitterComponent;\n\n","import * as THREE from 'three';\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\n\nconst url = 'kanye-face-1.jpg'\nconst cubeTexture = new THREE.TextureLoader().load(url); /*Variable for surface of cube, which fetches random image from public folder*/\nlet scale = 1;\nlet scaleVel = 0;\n\nclass Background {\n    constructor() {\n\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setClearColor('pink');\n\n        this.scene = new THREE.Scene(); /*Three requires a scene and a camera, which provides the perspective for the graphic/view*/\n        this.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 100);\n        this.camera.position.z = 3;\n\n        this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n\n        const geometry= new THREE.BoxBufferGeometry(1, 1, 1);\n        const material = new THREE.MeshBasicMaterial({ map: cubeTexture });\n        this.kanyeBoxFace = new THREE.Mesh(geometry, material); /*This combines the elements into a single call*/\n\n        this.scene.add(this.kanyeBoxFace);\n\n        document.body.appendChild(this.renderer.domElement);\n        this.renderer.domElement.style.position = 'absolute';\n        this.renderer.domElement.style.top = '0';\n        this.renderer.domElement.style.left = '0';\n\n        this.addEvents();\n        this.onResize();\n        this.update();\n    }\n\n    addEvents() {\n        window.addEventListener('resize', this.onResize.bind(this));\n    }\n    /*Update is called rapidly to realise the animation of the cube*/\n    update() {\n        this.kanyeBoxFace.rotation.y += 0.01;\n\n        this.renderer.render(this.scene, this.camera);\n\n        scaleVel = (1 - scale) * 0.05 + scaleVel * 0.85;\n        scale += scaleVel;\n\n        this.kanyeBoxFace.scale.setScalar(scale);\n\n        requestAnimationFrame(() => {\n            this.update();\n        });\n    }\n\n    onResize() {\n        const w = window.innerWidth;\n        const h = window.innerHeight;\n        this.renderer.setSize(w, h);\n        this.camera.aspect = w / h;\n        this.camera.updateProjectionMatrix();\n    }\n\n    static setNewTexture(imgUrl) {\n        console.log('new img', imgUrl)\n        const img = new Image();   // Create new img element\n\n        img.addEventListener('load', function() {\n            cubeTexture.image = img;\n            cubeTexture.needsUpdate = true;\n        }, false);\n\n        img.src = imgUrl; // Set source path\n        scaleVel += 0.2;\n    }\n}\n\nexport default Background;/**\n * Created by southpaw on 13/12/19.\n */\n","export default {\n    sad: {\n        index: 0,\n        images: [\n            'kanye-faces/face-sad-1.jpg',\n            'kanye-faces/face-sad-2.png',\n            'kanye-faces/face-sad-3.png'\n        ]\n    },\n    neutral: {\n        index: 0,\n        images: [\n            'kanye-faces/face-neutral-1.jpg',\n            'kanye-faces/face-neutral-2.jpg',\n            'kanye-faces/face-neutral-3.jpg'\n        ]\n    },\n    happy: {\n        index: 0,\n        images: [\n            'kanye-faces/face-happy-1.jpg',\n            'kanye-faces/face-happy-2.jpg',\n            'kanye-faces/face-happy-3.jpg'\n        ]\n    }\n}\nconst getWellbeing = val => {\n    const wellbeing = {};\n\n    if (val < -0.25) {\n        wellbeing.face = 'sad';\n        wellbeing.text = 'A bit grumps';\n\n        if (val < 0.5) wellbeing.text = 'very shitty'\n    } else if (val > -0.25 && val < 0.25) {\n        wellbeing.face = 'neutral';\n        wellbeing.text = 'quite neutral. Meh!';\n    } else {\n        wellbeing.face = 'happy';\n        wellbeing.text = 'a bit chuffed';\n\n        if (val > 0.5) wellbeing.text = 'super chuffed';\n    }\n\n    return wellbeing;\n};\n\nexport { getWellbeing };","import axios from 'axios';\nimport React, {Component} from 'react';\nimport Sentiment from 'sentiment';\nimport Background from './Background';\nimport Data, {getWellbeing} from '../data/data';\n\nconst sentiment = new Sentiment();\n\nexport class Quotes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            kanyeTweet: ''\n        };\n        this.handleClick = this.handleClick.bind(this)\n    } /*Here we set our state which will be updated next when the component loads or mounts. Initially it is an empty prop with\n    the placeholder of what we will fill in the data with....\n    --\n    This gets called\n    */\n\n    componentDidMount() {\n        axios.get('https://api.kanye.rest')\n            .then(response => {\n                this.setState({ kanyeTweet: response.data[\"quote\"]});\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }        /*Here axios library is out GET call to the third party api, the response is in JSON form and we set it to the state\n or the current relevant edition of the object. The returned quote then becomes the current state.\n We also use a callback to load any errors in the console. This is all the activity we want to occur onload or when the component\n mounts onto a container or page where its being called.*/\n\n    handleClick () {\n        axios.get('https://api.kanye.rest')\n            .then(response => this.setState({ kanyeTweet: response.data[\"quote\"]}))\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    /*This function provides a response by calling the API to get a new quote. SetState is called and replaces the previous\n    iteration of the object. */\n\n render() {\n    const kanyeTweet = Object.values(this.state);/*Tweets are added to state to be accessible*/\n    let result = sentiment.analyze(kanyeTweet[0]);\n    const wellbeing = getWellbeing(result.comparative);\n    const data = Data[wellbeing.face];\n    const img = data.images[data.index];\n    data.index = (data.index + 1) % data.images.length;  /*Loop over images when quotes changed sequentially*/\n\n    Background.setNewTexture(img);  /*Set image on box graphic*/\n\n    return (\n        <div>\n            <p className=\"line-1 anim-typewriter\" id=\"KanyeTweet\">{`\"${kanyeTweet}\"- Kanye West`}</p>\n            <p className=\"scores\">Score: <strong>{result.score}</strong></p>\n            <p className=\"scores\">Comparison: <strong>{result.comparative}</strong></p>\n            <p className=\"wellbeing\">Kanye is feeling {wellbeing.text}</p>\n            <button type=\"button\" id=\"wisdomButton\" className=\"btn btn-outline-info\" onClick={this.handleClick}>More Wisdom</button>\n        </div>\n    );\n}   /*Here we actually show the result in jsx form as a variable. Our target object is called kanyeTweet.\n This is in object form and I want to display it like its being typed. However, the library needs it mutated first.\n Then we use ES6 string interpolation to insert it into where a string would be in the Typical component.\n Then we finally export it as a component to the parent where it can be displayed*/\n}\n\nexport default Quotes;\n\n","/**\n * Created by southpaw on 9/12/19.\n */\nimport React from 'react';\nimport TwitterComponent from '../Components/TwitterComponent'\nimport Quotes from '../Components/Quotes'\n\n\nconst QuoteContainer = () => {\n\n    return(\n        <article>\n            <h1 className=\"board-game\">IS KANYE OK TODAY? </h1>\n            <p>Sentiment analysis of his thoughts</p>\n            <div className=\"flex-wrapper\">\n                <main className=\"app\">\n                    <section className=\"quotes\">\n                        <div className=\"quote-text\">\n                         <Quotes />\n                        </div>\n                    </section>\n\n                    <section className=\"tweetDisplay\">\n                        <TwitterComponent />\n                    </section>\n                </main>\n\n            </div>\n        </article> /*This is a container to provide the context for other logic. Ideal for separating concerns.*/\n    )\n};\n\nexport default QuoteContainer;","import React from 'react';\nimport QuoteContainer from './Components/QuoteContainer'\nimport Background from './Components/Background'\nimport './App.css';\n\n\nfunction App() {\n  const bg = new Background(); /*All threejs work will end up here*/\n\n  return (\n      <div className=\"App\">\n        <div className=\"grid-wrapper\">\n          <QuoteContainer />\n        </div>\n      </div>\n  );\n} /*This is where all our app funnels into. Each component is here and could be passed extra properties if needed*/\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}